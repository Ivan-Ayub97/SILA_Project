import sys
import numpy as np
import pyaudio
from PyQt5 import QtWidgets, QtCore, QtGui
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from scipy.signal import spectrogram
import psutil
from matplotlib.backends.backend_pdf import PdfPages
import base64
from matplotlib import cm
from matplotlib.ticker import MaxNLocator
from matplotlib.colors import LinearSegmentedColormap

class SoundMonitor(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("SoundWIDI by SILA")
        self.setGeometry(100, 100, 1200, 800)
        self.setStyleSheet("background-color: #121212; color: #ffffff; font-family: Arial;")

        # Establecer icono desde base64
        self.setWindowIcon(self.load_icon_base64())

        # Inicializar layouts
        self.init_ui()

        # Inicializar variables
        self.audio_stream = None
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_plot)

    def load_icon_base64(self):
        """Carga el icono desde base64."""
        icon_base64 = """
        
        """  # Aquí va tu contenido base64 real
        icon_data = base64.b64decode(icon_base64)
        pixmap = QtGui.QPixmap()
        pixmap.loadFromData(icon_data)
        return QtGui.QIcon(pixmap)

    def init_ui(self):
        """Inicializa la interfaz de usuario."""
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QtWidgets.QHBoxLayout(self.central_widget)

        # Panel lateral
        self.control_panel = QtWidgets.QWidget()
        self.control_layout = QtWidgets.QVBoxLayout(self.control_panel)
        self.control_panel.setFixedWidth(300)
        self.layout.addWidget(self.control_panel)

        # Controles
        self.setup_application_selector()
        self.setup_latency_control()
        self.setup_start_stop_buttons()
        self.setup_session_buttons()

        # Área de gráficos
        self.graph_layout = QtWidgets.QVBoxLayout()
        self.layout.addLayout(self.graph_layout)
        self.setup_waveform_plot()
        self.setup_spectrogram_plot()
        self.setup_feedback_plot()

        # Feedback visual
        self.setup_feedback_indicator()

    def setup_application_selector(self):
        """Configura el selector de aplicaciones abiertas."""
        self.control_layout.addWidget(QtWidgets.QLabel("SELECT PROGRAM:"))

        self.search_bar = QtWidgets.QLineEdit()
        self.search_bar.setPlaceholderText("Search...")
        self.search_bar.textChanged.connect(self.filter_apps)
        self.control_layout.addWidget(self.search_bar)

        self.app_selector = QtWidgets.QComboBox()
        self.app_selector.addItems(self.get_open_apps())
        self.control_layout.addWidget(self.app_selector)

    def filter_apps(self):
        """Filtra las aplicaciones en el selector según el texto de búsqueda."""
        search_text = self.search_bar.text().lower()
        filtered_apps = [app for app in self.get_open_apps() if search_text in app.lower()]
        self.app_selector.clear()
        self.app_selector.addItems(filtered_apps)

    def get_open_apps(self):
        """Devuelve una lista de aplicaciones abiertas en el sistema."""
        apps = []
        for proc in psutil.process_iter(['pid', 'name']):
            apps.append(proc.info['name'])
        return apps

    def setup_latency_control(self):
        """Configura el control de latencia."""
        self.control_layout.addWidget(QtWidgets.QLabel("Latency (ms):"))
        self.latency_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.latency_slider.setRange(1, 1000)
        self.latency_slider.setValue(1000)
        self.control_layout.addWidget(self.latency_slider)

    def setup_start_stop_buttons(self):
        """Configura los botones de inicio y detención."""
        self.start_button = self.create_button("Start", self.start_monitoring, "#1e88e5")
        self.stop_button = self.create_button("Stop", self.stop_monitoring, "#e53935")
        self.control_layout.addWidget(self.start_button)
        self.control_layout.addWidget(self.stop_button)

    def create_button(self, text, callback, color):
        """Crea un botón con estilo."""
        button = QtWidgets.QPushButton(text)
        button.setStyleSheet(f"background-color: {color}; color: #ffffff; border-radius: 5px; padding: 10px;")
        button.clicked.connect(callback)
        return button

    def setup_session_buttons(self):
        """Configura los botones para guardar y cargar sesiones."""
        save_load_layout = QtWidgets.QHBoxLayout()
        self.save_button = self.create_button("Save PDF", self.save_session_pdf, "#1e88e5")
        self.load_button = self.create_button("Load Session", self.load_session, "#1e88e5")
        save_load_layout.addWidget(self.save_button)
        save_load_layout.addWidget(self.load_button)
        self.control_layout.addLayout(save_load_layout)

    def setup_waveform_plot(self):
        """Configura el gráfico de forma de onda con estética mejorada."""
        self.figure_wave = Figure(figsize=(10, 3), dpi=100)
        self.canvas_wave = FigureCanvas(self.figure_wave)
        self.graph_layout.addWidget(self.canvas_wave)

        # Fondo degradado
        cmap = LinearSegmentedColormap.from_list("custom_cmap", ["#e0f7fa", "#006064"])
        self.ax_wave = self.figure_wave.add_subplot(111, facecolor=cmap(0.1))
        self.ax_wave.set_title(
            'Waveform', fontsize=12, color='#003c8f', weight='bold', pad=20
        )
        self.ax_wave.set_xlim(0, 5100)
        self.ax_wave.set_ylim(-1, 1)
        self.ax_wave.grid(color='white', linestyle='--', linewidth=0.5, alpha=0.7)
        self.line_wave, = self.ax_wave.plot(
            [], [], color='#ff6f00', linewidth=1, label="Amplitud"
        )
        self.ax_wave.legend(loc="upper right", fontsize=8, facecolor='white', edgecolor='gray')

    def setup_spectrogram_plot(self):
        """Configura el gráfico de espectrograma con estética mejorada."""
        self.figure_spectrogram = Figure(figsize=(10, 4), dpi=100)
        self.canvas_spectrogram = FigureCanvas(self.figure_spectrogram)
        self.graph_layout.addWidget(self.canvas_spectrogram)

        # Fondo degradado
        cmap = LinearSegmentedColormap.from_list("custom_cmap", ["#fce4ec", "#880e4f"])
        self.ax_spec = self.figure_spectrogram.add_subplot(111, facecolor=cmap(0.1))
        self.ax_spec.set_title(
            'Espectrogram', fontsize=10, color='#4a148c', weight='bold', pad=17
        )
        self.ax_spec.set_ylabel('Frecuency [Hz]', fontsize=8, color='#4a148c')
        self.ax_spec.set_xlabel('Time [s]', fontsize=8, color='#4a148c')
        self.ax_spec.grid(color='white', linestyle='--', linewidth=0.5, alpha=0.7)

    def setup_feedback_plot(self):
        """Configura el histograma de notas con estética mejorada."""
        self.figure_feedback = Figure(figsize=(10, 3), dpi=100)
        self.canvas_feedback = FigureCanvas(self.figure_feedback)
        self.graph_layout.addWidget(self.canvas_feedback)

        # Fondo degradado
        cmap = LinearSegmentedColormap.from_list("custom_cmap", ["#ede7f6", "#311b92"])
        self.ax_feedback = self.figure_feedback.add_subplot(111, facecolor=cmap(0.1))
        self.ax_feedback.set_title(
            'Notes Histogram', fontsize=10, color='#1a237e', weight='bold', pad=20
        )
        self.ax_feedback.set_ylabel('Frecuency', fontsize=10, color='#1a237e')
        self.ax_feedback.set_xlabel('Notes', fontsize=10, color='#1a237e')
        self.ax_feedback.xaxis.set_major_locator(MaxNLocator(integer=True))
        self.ax_feedback.grid(color='white', linestyle='--', linewidth=0.5, alpha=0.7)

        # Ejemplo de anotaciones
        self.ax_feedback.annotate(
            "Most frequent note",
            xy=(0.5, 0.9),
            xycoords="axes fraction",
            fontsize=8,
            color="#ffab00",
            ha="center",
            bbox=dict(boxstyle="round,pad=0.3", edgecolor="gray", facecolor="white"),
        )

    def setup_feedback_indicator(self):
        """Configura el indicador de feedback visual."""
        self.feedback_label = QtWidgets.QLabel("Feedback:")
        self.control_layout.addWidget(self.feedback_label)
        self.feedback_indicator = QtWidgets.QLabel()
        self.feedback_indicator.setFixedSize(50, 50)
        self.feedback_indicator.setStyleSheet("background-color: gray; border-radius: 25px;")
        self.control_layout.addWidget(self.feedback_indicator)

    def start_monitoring(self):
        """Inicia el monitoreo del sonido de la aplicación seleccionada."""
        app_name = self.app_selector.currentText()
        if not app_name:
            QtWidgets.QMessageBox.warning(self, "Error", "Please select a valid program.")
            return

        try:
            self.audio_stream = self.init_audio_stream()
            self.timer.start(self.latency_slider.value())
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"Could not start audio capture: {str(e)}")

    def init_audio_stream(self):
        """Inicializa el flujo de audio para capturar sonido."""
        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paInt16,
                        channels=2,
                        rate=44100,
                        input=True,
                        frames_per_buffer=1024)
        return stream

    def stop_monitoring(self):
        """Detiene el monitoreo de audio."""
        if self.audio_stream:
            self.audio_stream.stop_stream()
            self.audio_stream.close()
            self.audio_stream = None
        self.timer.stop()
        print("Monitoring stopped.")

    def update_plot(self):
        """Actualiza los gráficos de forma de onda y espectrograma."""
        if self.audio_stream is not None:
            data = self.audio_stream.read(1024)
            audio_data = np.frombuffer(data, dtype=np.int16)
            self.line_wave.set_data(np.arange(len(audio_data)), audio_data)
            self.ax_wave.relim()
            self.ax_wave.autoscale_view()
            self.canvas_wave.draw()

            # Actualización del espectrograma
            f, t, Sxx = spectrogram(audio_data, fs=44100)
            self.ax_spec.clear()
            self.ax_spec.pcolormesh(t, f, 10 * np.log10(Sxx), shading='gouraud')
            self.ax_spec.set_ylabel('Frecueny [Hz]')
            self.ax_spec.set_xlabel('Time [s]')
            self.canvas_spectrogram.draw()

            # Actualización del histograma de notas
            self.ax_feedback.clear()
            notes, counts = np.unique(audio_data, return_counts=True)
            self.ax_feedback.bar(notes, counts, color='red', width=0.5)
            self.ax_feedback.set_title("Notes Histogram")
            self.canvas_feedback.draw()

    def save_session_pdf(self):
        """Guarda el contenido actual en un archivo PDF."""
        pdf_filename, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Save as PDF", "", "PDF Files (*.pdf)")
        if not pdf_filename:
            return

        with PdfPages(pdf_filename) as pdf:
            pdf.savefig(self.figure_wave)
            pdf.savefig(self.figure_spectrogram)
            pdf.savefig(self.figure_feedback)
            QtWidgets.QMessageBox.information(self, "Success", "Session saved as PDF.")

    def load_session(self):
        """Carga una sesión previamente guardada."""
        session_filename, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Load Session", "", "Session Files (*.ses)")
        if not session_filename:
            return
        # Lógica para cargar sesión
        print(f"Loading session from{session_filename}...")

def main():
    app = QtWidgets.QApplication(sys.argv)
    window = SoundMonitor()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
